{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","editor","monaco","focus","newValue","e","UIDLValidators","validateComponent","validJSON","JSON","parse","createReactComponentGenerator","variation","generateComponent","then","result","code","ast","externalCSS","babylon","sourceType","plugins","travese","ReturnStatement","path","generatedCode","generate","node","argument","retainLines","compact","concise","document","getElementById","innerHTML","react_default","a","createElement","className","lib_default","width","height","language","theme","value","options","selectOnLineNumbers","onChange","this","editorDidMount","id","target","href","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oQAiFeA,yLArEEC,EAAQC,GACrBD,EAAOE,yCAGAC,EAAUC,GAEjB,GADWC,iBAAeC,kBAAkBH,GAE1C,IACE,IAAMI,EAAYC,KAAKC,MAAMN,GACNO,wCAA8B,CAAEC,UAAW,eACnDC,kBAAkBL,GAC9BM,KAAK,SAAAC,GAAU,IACNC,EAAsBD,EAAtBC,KACFC,GADwBF,EAAhBG,YACFC,QAAcH,EAAM,CAAEI,WAAY,SAAUC,QAAS,CAAC,UAClEC,IAAQL,EAAK,CACXM,gBADW,SACKC,GACd,IAAMC,EAAgBC,IAASF,EAAKG,KAAKC,SAAU,CACjDC,aAAa,EACbC,QAAS,OACTC,SAAS,GACRf,GACQgB,SAASC,eAAe,UAChCC,UAAYT,EAAcT,UAIrC,MAAMX,SAIG2B,SAASC,eAAe,UAChCC,UAAY,sDAQjB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CACEI,MAAM,MACNC,OAAO,OACPC,SAAS,aACTC,MAAM,UACNC,MAAM,GACNC,QAZQ,CACdC,qBAAqB,GAYfC,SAAUC,KAAKD,SACfE,eAAgBD,KAAKC,kBAGzBd,EAAAC,EAAAC,cAAA,OAAKa,GAAG,SAASZ,UAAU,iBAA3B,qCAEEH,EAAAC,EAAAC,cAAA,+CAEEF,EAAAC,EAAAC,cAAA,KACEc,OAAO,SACPC,KAAK,oGAFP,sBA1DMC,aCCEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzB,EAAAC,EAAAC,cAACwB,EAAD,MAAS7B,SAASC,eAAe,SD2H3C,kBAAmB6B,WACrBA,UAAUC,cAAcC,MAAMlD,KAAK,SAAAmD,GACjCA,EAAaC","file":"static/js/main.cb110e87.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { sample } from './uidl-sample';\nimport MonacoEditor from 'react-monaco-editor';\nimport {\n  UIDLValidators,\n  createReactComponentGenerator\n} from '@teleporthq/teleport-code-generators';\nimport * as babylon from 'babylon';\nimport travese from '@babel/traverse';\nimport generate from 'babel-generator';\n\nclass App extends Component {\n  editorDidMount(editor, monaco) {\n    editor.focus();\n  }\n\n  onChange(newValue, e) {\n    let flag = UIDLValidators.validateComponent(newValue);\n    if (flag) {\n      try {\n        const validJSON = JSON.parse(newValue);\n        const reactGenerator = createReactComponentGenerator({ variation: 'CSSModules'});\n        reactGenerator.generateComponent(validJSON)\n          .then(result => {\n            const { code, externalCSS } = result;\n            const ast = babylon.parse(code, { sourceType: 'module', plugins: [\"jsx\"] });\n            travese(ast, {\n              ReturnStatement(path) {\n                const generatedCode = generate(path.node.argument, {\n                  retainLines: false,\n                  compact: \"auto\",\n                  concise: false\n                }, code);\n                const el = document.getElementById('holder');\n                el.innerHTML = generatedCode.code;\n              }\n            });\n          });\n      } catch(e) {\n       // console.log(e);\n      }\n    } else {\n      const el = document.getElementById('holder');\n      el.innerHTML = 'Input a valid UIDL';\n    }\n  }\n\n  render() {\n    const options = {\n      selectOnLineNumbers: true\n    };\n    return (\n      <div className=\"wrapper\">\n        <div>\n          <MonacoEditor\n            width=\"800\"\n            height=\"100%\"\n            language=\"javascript\"\n            theme=\"vs-dark\"\n            value=''\n            options={options}\n            onChange={this.onChange}\n            editorDidMount={this.editorDidMount}\n          />\n        </div>\n        <div id=\"holder\" className=\"holderWrapper\">\n          Live Preview of the generated code\n          <p>\n            Link for a collection of valid UIDL\n            <a\n              target=\"_blank\"\n              href=\"https://github.com/JayaKrishnaNamburu/teleport-code-generators/tree/master/examples/uidl-samples\">\n              examples\n            </a>\n          </p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}